<?php
    require('../s/common/core.php');
    require(DIR_ROOT.'s/common/function.php');
    require(DIR_ROOT.'s/common/exefunction.php');
    
    $room_id='';
    $room_dir='';
    $room_file='';
    $room_mirror_file='';
    if(!empty($_POST['room_id'])){
        $room_id=basename($_POST['room_id']);
        $room_dir=DIR_ROOT.'r/n/'.$room_id.'/';
        $room_file=$room_dir.'data.xml';
        $room_mirror_file=$room_dir.'data-mirror.xml';
        if(!file_exists($room_file)){
            echo json_encode(array(
                'error'=>'no_room',
                'error_description'=>'ルームが見つかりません。'
            ));
            exit;
        }
    }else{
        echo json_encode(array(
            'error'=>'no_room_id',
            'error_description'=>'ルームIDが指定されていません。'
        ));
        exit;
    }
    $principal_id='';
    if(!empty($_POST['principal_id'])){
        $principal_id=$_POST['principal_id'];
    }else{
        echo json_encode(array(
            'error'=>'no_specified_id',
            'error_description'=>'プレイヤーが指定されていません。'
        ));
        exit;
    }
    $char_name='';
    if(!empty($_POST['char_name'])){
        $char_name=$_POST['char_name'];
    }else{
        echo json_encode(array(
            'error'=>'no_specified_name',
            'error_description'=>'キャラクター名が指定されていません。'
        ));
        exit;
    }
    $char_id='';
    if(!empty($_POST['char_id'])){
        $char_id=$_POST['char_id'];
    }else{
        echo json_encode(array(
            'error'=>'no_specified_char_id',
            'error_description'=>'キャラクターIDが指定されていません。'
        ));
        exit;
    }
    $game_type='その他';
    if(!empty($_POST['game_type'])){
        $game_type=$_POST['game_type'];
    }
    $char_hp='';
    if(!empty($_POST['char_hp'])){
        $char_hp=$_POST['char_hp'];
    }
    $char_mhp='';
    if(!empty($_POST['char_mhp'])){
        $char_mhp=$_POST['char_mhp'];
    }
    $char_mp='';
    if(!empty($_POST['char_mp'])){
        $char_mp=$_POST['char_mp'];
    }
    $char_mmp='';
    if(!empty($_POST['char_mmp'])){
        $char_mmp=$_POST['char_mmp'];
    }
    $char_memo='';
    if(!empty($_POST['char_memo'])){
        $char_memo=$_POST['char_memo'];
    }
    $detail_a='';
    if(!empty($_POST['detail_a'])){
        $detail_a=$_POST['detail_a'];
    }
    $detail_b='';
    if(!empty($_POST['detail_b'])){
        $detail_b=$_POST['detail_b'];
    }
    $detail_c='';
    if(!empty($_POST['detail_c'])){
        $detail_c=$_POST['detail_c'];
    }
    $macro='';
    $change_word=array(array('<','＜'),
                       array('>','＞'),
                       array('&','＆'),
                       array("'",'’'),
                       array('\\','￥'),
                       array('|','｜'),
                       array('^','＾'));
    if(isset($_POST['macro_c1'])){
        $str_proto_macro=trim($_POST['macro_c1']);
        $macro_rowarray=explode("\n",$str_proto_macro);
        for($i=0;$i<count($macro_rowarray);$i++){
            $macro_colarray=explode('|',$macro_rowarray[$i]);
            $macro_name='';
            if(!empty($macro_colarray[0])){
                $macro_name=str_replace(array("#","$","@","＃","＄","＠"),'',trim($macro_colarray[0]));
            }
            $macro_command='';
            if(!empty($macro_colarray[1])){
                $macro_command=str_replace(array("$","＄"),'',trim($macro_colarray[1]));
            }
            if(($macro_name!='')&&($macro_command!='')){
                if($macro!=''){
                    $macro.='^';
                }   
                $macro.=$macro_name.'|'.$macro_command;
            }
        }
    }
    $outer_url='';
    if(!empty($_POST['outer_url'])){
        $outer_url=$_POST['outer_url'];
    }
    $created_in_room=0;
    if(!empty($_POST['created_in_room'])){
        $created_in_room=1;
    }
    // キャラクターファイルの読み込み
    $c_character=new classCharacter;
    if($c_character->load($room_id,$char_id,$principal_id)){
        $c_character->updateTime();
    }else{
        $c_character->updateRegistrationData();
    }
    $character_tag_array=array(array('room_id',$room_id),
                               array('id',$char_id),
                               array('owner_id',$principal_id),
                               array('game_type',$game_type),
                               array('name',$char_name),
                               array('hp',$char_hp),
                               array('mhp',$char_mhp),
                               array('mp',$char_mp),
                               array('mmp',$char_mmp),
                               array('condition',$char_memo),
                               array('detail_a',$detail_a),
                               array('detail_b',$detail_b),
                               array('detail_c',$detail_c),
                               array('macro',$macro),
                               array('outer_url',$outer_url),
                               array('created_in_room',$created_in_room));
    foreach($character_tag_array as $value){
        $c_character->getParam($value[0],$value[1]);
    }
    // キャラクター画像の保存 前処理
    $image_save_file=$c_character->createFileName();
    $img_upload_flag=false;
    $before_img=(string)$c_character->image;
    if(!empty($_FILES['char_image']['name'])){
        if(uploadImage($_FILES['char_image'],$room_dir.$image_save_file,$upload_image_err,1024000,200)){
            $c_character->getParam('image',$image_save_file);
            $img_upload_flag=true;
        }
    }
    // キャラクターファイルの保存
    $characterlist_array=array();
    if($c_character->save()){
        // キャラクター画像の保存 後処理
        if($img_upload_flag==true){
            $after_img=(string)$c_character->image;
            if(($after_img!=$before_img)&&
               (file_exists($room_dir.$after_img))&&
               (file_exists($room_dir.$before_img))){
                   @unlink($room_dir.$before_img); 
            }
        }
        $c_list=$c_character->loadCharacterList($room_id,$principal_id);
        if($c_list!==false){
            $characterlist_array=$c_list;
        }
        unset($c_list);
        // 0  1         2    3                 4            5     6      7     8       9          10    11
        // id、game_type、name、registration_date、update_time、image、ranking、iine、owner_id、designated、macro、stand_image
        $characterlist_array[$char_id]=array($c_character->id,
                                             $c_character->game_type,
                                             $c_character->name,
                                             '',
                                             '',
                                             $c_character->image,
                                             '',
                                             '',
                                             $c_character->owner_id,
                                             '',
                                             $c_character->macro,
                                             $c_character->standArrayToString());
        if(!$c_character->saveCharacterList($room_id,$principal_id,$characterlist_array)){
            echo json_encode(array(
                'error'=>'failed_to_save_character_list',
                'error_description'=>'キャラクター一覧情報の保存に失敗しました。'
            ));
            exit;
        }
        $json_base_data['stand_image']=$c_character->stand;
        $json_base_data['charlist']=$c_character->convertCharListArray($characterlist_array);
    }else{
        // キャラクター画像の保存キャンセル 後処理
        if($img_upload_flag==true){
            $after_img=(string)$c_character->image;
            if(($after_img!=$before_img)&&
               (file_exists($room_dir.$after_img))&&
               (file_exists($room_dir.$before_img))){
                   @unlink($room_dir.$after_img); 
            }
        }
        echo json_encode(array(
            'error'=>'failed_to_save_character',
            'error_description'=>'キャラクター情報の保存に失敗しました。'
        ));
        exit;
    }
    echo json_encode($json_base_data);